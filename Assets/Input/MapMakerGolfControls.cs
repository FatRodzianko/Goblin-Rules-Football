//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Input/MapMakerGolfControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MapMakerGolfControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MapMakerGolfControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MapMakerGolfControls"",
    ""maps"": [
        {
            ""name"": ""MapMaker"",
            ""id"": ""64abbbfe-8a59-40b7-8633-542527ede40c"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""49ec14cf-8c6c-4450-adee-f2a2fd645e66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""d6dc4b55-f5b1-41b2-b8cb-6ad2a8778bc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""5286a9b1-b427-4f89-a1ff-d7c1214856c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f715056-bda0-4a7f-8ed4-acf551dcb8b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b3c4179-aee6-49b4-859d-df73d4828a56"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b83b4ecb-d9bb-425d-8f7e-bbd06e88f1b7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MapMaker
        m_MapMaker = asset.FindActionMap("MapMaker", throwIfNotFound: true);
        m_MapMaker_MouseLeftClick = m_MapMaker.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_MapMaker_MouseRightClick = m_MapMaker.FindAction("MouseRightClick", throwIfNotFound: true);
        m_MapMaker_MousePosition = m_MapMaker.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapMaker
    private readonly InputActionMap m_MapMaker;
    private IMapMakerActions m_MapMakerActionsCallbackInterface;
    private readonly InputAction m_MapMaker_MouseLeftClick;
    private readonly InputAction m_MapMaker_MouseRightClick;
    private readonly InputAction m_MapMaker_MousePosition;
    public struct MapMakerActions
    {
        private @MapMakerGolfControls m_Wrapper;
        public MapMakerActions(@MapMakerGolfControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeftClick => m_Wrapper.m_MapMaker_MouseLeftClick;
        public InputAction @MouseRightClick => m_Wrapper.m_MapMaker_MouseRightClick;
        public InputAction @MousePosition => m_Wrapper.m_MapMaker_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MapMaker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapMakerActions set) { return set.Get(); }
        public void SetCallbacks(IMapMakerActions instance)
        {
            if (m_Wrapper.m_MapMakerActionsCallbackInterface != null)
            {
                @MouseLeftClick.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseLeftClick;
                @MouseRightClick.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseRightClick;
                @MouseRightClick.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseRightClick;
                @MouseRightClick.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseRightClick;
                @MousePosition.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_MapMakerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseLeftClick.started += instance.OnMouseLeftClick;
                @MouseLeftClick.performed += instance.OnMouseLeftClick;
                @MouseLeftClick.canceled += instance.OnMouseLeftClick;
                @MouseRightClick.started += instance.OnMouseRightClick;
                @MouseRightClick.performed += instance.OnMouseRightClick;
                @MouseRightClick.canceled += instance.OnMouseRightClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public MapMakerActions @MapMaker => new MapMakerActions(this);
    public interface IMapMakerActions
    {
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
