//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/Input/MapMakerGolfControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MapMakerGolfControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MapMakerGolfControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MapMakerGolfControls"",
    ""maps"": [
        {
            ""name"": ""MapMaker"",
            ""id"": ""64abbbfe-8a59-40b7-8633-542527ede40c"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""49ec14cf-8c6c-4450-adee-f2a2fd645e66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,SlowTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseRightClick"",
                    ""type"": ""Button"",
                    ""id"": ""d6dc4b55-f5b1-41b2-b8cb-6ad2a8778bc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""5286a9b1-b427-4f89-a1ff-d7c1214856c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EraserSelect"",
                    ""type"": ""Button"",
                    ""id"": ""f778db25-c50a-401d-bb1c-f784588f93d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SingleDrawMode"",
                    ""type"": ""Button"",
                    ""id"": ""8b9e3add-993b-4a83-8f62-6bbf18839fd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LineDrawMode"",
                    ""type"": ""Button"",
                    ""id"": ""ac736d7f-066d-4620-a730-7af00ecdee23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FillDrawMode"",
                    ""type"": ""Button"",
                    ""id"": ""6d671766-b0da-4d76-bd61-107b3e7aadc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RectangleDrawMode"",
                    ""type"": ""Button"",
                    ""id"": ""7785faa1-52e5-4219-a4b8-1c2ff766f884"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MaximizeWindow"",
                    ""type"": ""Button"",
                    ""id"": ""7b6d31e7-b68c-45dd-b9ae-c914d18f206e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MinimizeWindow"",
                    ""type"": ""Button"",
                    ""id"": ""d0eb835d-e755-497f-bcc2-fa19db377a98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomInOut"",
                    ""type"": ""Value"",
                    ""id"": ""3bdaa33d-98a4-4a7e-b63e-c99e0280e5df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ResetZoom"",
                    ""type"": ""Button"",
                    ""id"": ""710a5403-41fa-416e-8b8b-4e58f363657e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""84dd635a-5976-41a1-90f1-c158c63498ce"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f715056-bda0-4a7f-8ed4-acf551dcb8b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b3c4179-aee6-49b4-859d-df73d4828a56"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b83b4ecb-d9bb-425d-8f7e-bbd06e88f1b7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""026a3fde-2932-4dd6-991d-92c027167e97"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EraserSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f606a06e-c639-4bc6-acb6-8623358b24b4"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleDrawMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d78a8cf7-65b1-4b05-a535-9ae3a8946624"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LineDrawMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f649f9f-f93a-4ceb-864a-9e2f2d153bde"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FillDrawMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee66bb91-b14c-49b2-bdfa-bc2533cb7125"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RectangleDrawMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19e9b7c1-c5d1-4f13-9ebe-b5a45ddf04d1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MaximizeWindow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62f35a22-7ed7-4ba4-b152-57848362acc7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MinimizeWindow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f00b1070-edbc-4fdb-aed4-657bc742d115"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomInOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d66c6b4-6178-474f-ad66-de9f5cf8277c"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b0e827ab-cc08-4804-815f-7f0f21bb36e4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""64e8334f-8969-49d8-b8cf-d70c4e960884"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8b088fed-b5e4-4ae6-9aa6-d7a0466cee96"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ee6dcffd-d365-43dd-a703-8fa0e8b7dc7b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c3227514-d466-4db6-8887-4a51f778a195"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MapMaker
        m_MapMaker = asset.FindActionMap("MapMaker", throwIfNotFound: true);
        m_MapMaker_MouseLeftClick = m_MapMaker.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_MapMaker_MouseRightClick = m_MapMaker.FindAction("MouseRightClick", throwIfNotFound: true);
        m_MapMaker_MousePosition = m_MapMaker.FindAction("MousePosition", throwIfNotFound: true);
        m_MapMaker_EraserSelect = m_MapMaker.FindAction("EraserSelect", throwIfNotFound: true);
        m_MapMaker_SingleDrawMode = m_MapMaker.FindAction("SingleDrawMode", throwIfNotFound: true);
        m_MapMaker_LineDrawMode = m_MapMaker.FindAction("LineDrawMode", throwIfNotFound: true);
        m_MapMaker_FillDrawMode = m_MapMaker.FindAction("FillDrawMode", throwIfNotFound: true);
        m_MapMaker_RectangleDrawMode = m_MapMaker.FindAction("RectangleDrawMode", throwIfNotFound: true);
        m_MapMaker_MaximizeWindow = m_MapMaker.FindAction("MaximizeWindow", throwIfNotFound: true);
        m_MapMaker_MinimizeWindow = m_MapMaker.FindAction("MinimizeWindow", throwIfNotFound: true);
        m_MapMaker_ZoomInOut = m_MapMaker.FindAction("ZoomInOut", throwIfNotFound: true);
        m_MapMaker_ResetZoom = m_MapMaker.FindAction("ResetZoom", throwIfNotFound: true);
        m_MapMaker_MoveCamera = m_MapMaker.FindAction("MoveCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapMaker
    private readonly InputActionMap m_MapMaker;
    private IMapMakerActions m_MapMakerActionsCallbackInterface;
    private readonly InputAction m_MapMaker_MouseLeftClick;
    private readonly InputAction m_MapMaker_MouseRightClick;
    private readonly InputAction m_MapMaker_MousePosition;
    private readonly InputAction m_MapMaker_EraserSelect;
    private readonly InputAction m_MapMaker_SingleDrawMode;
    private readonly InputAction m_MapMaker_LineDrawMode;
    private readonly InputAction m_MapMaker_FillDrawMode;
    private readonly InputAction m_MapMaker_RectangleDrawMode;
    private readonly InputAction m_MapMaker_MaximizeWindow;
    private readonly InputAction m_MapMaker_MinimizeWindow;
    private readonly InputAction m_MapMaker_ZoomInOut;
    private readonly InputAction m_MapMaker_ResetZoom;
    private readonly InputAction m_MapMaker_MoveCamera;
    public struct MapMakerActions
    {
        private @MapMakerGolfControls m_Wrapper;
        public MapMakerActions(@MapMakerGolfControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeftClick => m_Wrapper.m_MapMaker_MouseLeftClick;
        public InputAction @MouseRightClick => m_Wrapper.m_MapMaker_MouseRightClick;
        public InputAction @MousePosition => m_Wrapper.m_MapMaker_MousePosition;
        public InputAction @EraserSelect => m_Wrapper.m_MapMaker_EraserSelect;
        public InputAction @SingleDrawMode => m_Wrapper.m_MapMaker_SingleDrawMode;
        public InputAction @LineDrawMode => m_Wrapper.m_MapMaker_LineDrawMode;
        public InputAction @FillDrawMode => m_Wrapper.m_MapMaker_FillDrawMode;
        public InputAction @RectangleDrawMode => m_Wrapper.m_MapMaker_RectangleDrawMode;
        public InputAction @MaximizeWindow => m_Wrapper.m_MapMaker_MaximizeWindow;
        public InputAction @MinimizeWindow => m_Wrapper.m_MapMaker_MinimizeWindow;
        public InputAction @ZoomInOut => m_Wrapper.m_MapMaker_ZoomInOut;
        public InputAction @ResetZoom => m_Wrapper.m_MapMaker_ResetZoom;
        public InputAction @MoveCamera => m_Wrapper.m_MapMaker_MoveCamera;
        public InputActionMap Get() { return m_Wrapper.m_MapMaker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapMakerActions set) { return set.Get(); }
        public void SetCallbacks(IMapMakerActions instance)
        {
            if (m_Wrapper.m_MapMakerActionsCallbackInterface != null)
            {
                @MouseLeftClick.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseLeftClick;
                @MouseLeftClick.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseLeftClick;
                @MouseRightClick.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseRightClick;
                @MouseRightClick.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseRightClick;
                @MouseRightClick.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMouseRightClick;
                @MousePosition.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMousePosition;
                @EraserSelect.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnEraserSelect;
                @EraserSelect.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnEraserSelect;
                @EraserSelect.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnEraserSelect;
                @SingleDrawMode.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnSingleDrawMode;
                @SingleDrawMode.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnSingleDrawMode;
                @SingleDrawMode.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnSingleDrawMode;
                @LineDrawMode.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnLineDrawMode;
                @LineDrawMode.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnLineDrawMode;
                @LineDrawMode.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnLineDrawMode;
                @FillDrawMode.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnFillDrawMode;
                @FillDrawMode.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnFillDrawMode;
                @FillDrawMode.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnFillDrawMode;
                @RectangleDrawMode.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnRectangleDrawMode;
                @RectangleDrawMode.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnRectangleDrawMode;
                @RectangleDrawMode.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnRectangleDrawMode;
                @MaximizeWindow.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMaximizeWindow;
                @MaximizeWindow.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMaximizeWindow;
                @MaximizeWindow.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMaximizeWindow;
                @MinimizeWindow.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMinimizeWindow;
                @MinimizeWindow.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMinimizeWindow;
                @MinimizeWindow.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMinimizeWindow;
                @ZoomInOut.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnZoomInOut;
                @ZoomInOut.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnZoomInOut;
                @ZoomInOut.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnZoomInOut;
                @ResetZoom.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnResetZoom;
                @ResetZoom.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnResetZoom;
                @ResetZoom.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnResetZoom;
                @MoveCamera.started -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.performed -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.canceled -= m_Wrapper.m_MapMakerActionsCallbackInterface.OnMoveCamera;
            }
            m_Wrapper.m_MapMakerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseLeftClick.started += instance.OnMouseLeftClick;
                @MouseLeftClick.performed += instance.OnMouseLeftClick;
                @MouseLeftClick.canceled += instance.OnMouseLeftClick;
                @MouseRightClick.started += instance.OnMouseRightClick;
                @MouseRightClick.performed += instance.OnMouseRightClick;
                @MouseRightClick.canceled += instance.OnMouseRightClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @EraserSelect.started += instance.OnEraserSelect;
                @EraserSelect.performed += instance.OnEraserSelect;
                @EraserSelect.canceled += instance.OnEraserSelect;
                @SingleDrawMode.started += instance.OnSingleDrawMode;
                @SingleDrawMode.performed += instance.OnSingleDrawMode;
                @SingleDrawMode.canceled += instance.OnSingleDrawMode;
                @LineDrawMode.started += instance.OnLineDrawMode;
                @LineDrawMode.performed += instance.OnLineDrawMode;
                @LineDrawMode.canceled += instance.OnLineDrawMode;
                @FillDrawMode.started += instance.OnFillDrawMode;
                @FillDrawMode.performed += instance.OnFillDrawMode;
                @FillDrawMode.canceled += instance.OnFillDrawMode;
                @RectangleDrawMode.started += instance.OnRectangleDrawMode;
                @RectangleDrawMode.performed += instance.OnRectangleDrawMode;
                @RectangleDrawMode.canceled += instance.OnRectangleDrawMode;
                @MaximizeWindow.started += instance.OnMaximizeWindow;
                @MaximizeWindow.performed += instance.OnMaximizeWindow;
                @MaximizeWindow.canceled += instance.OnMaximizeWindow;
                @MinimizeWindow.started += instance.OnMinimizeWindow;
                @MinimizeWindow.performed += instance.OnMinimizeWindow;
                @MinimizeWindow.canceled += instance.OnMinimizeWindow;
                @ZoomInOut.started += instance.OnZoomInOut;
                @ZoomInOut.performed += instance.OnZoomInOut;
                @ZoomInOut.canceled += instance.OnZoomInOut;
                @ResetZoom.started += instance.OnResetZoom;
                @ResetZoom.performed += instance.OnResetZoom;
                @ResetZoom.canceled += instance.OnResetZoom;
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
            }
        }
    }
    public MapMakerActions @MapMaker => new MapMakerActions(this);
    public interface IMapMakerActions
    {
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnMouseRightClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnEraserSelect(InputAction.CallbackContext context);
        void OnSingleDrawMode(InputAction.CallbackContext context);
        void OnLineDrawMode(InputAction.CallbackContext context);
        void OnFillDrawMode(InputAction.CallbackContext context);
        void OnRectangleDrawMode(InputAction.CallbackContext context);
        void OnMaximizeWindow(InputAction.CallbackContext context);
        void OnMinimizeWindow(InputAction.CallbackContext context);
        void OnZoomInOut(InputAction.CallbackContext context);
        void OnResetZoom(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
    }
}
